// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: custom.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(81c2f05a394cf4af);
CAPNP_DECLARE_SCHEMA(fedf95d62450ddd1);
CAPNP_DECLARE_SCHEMA(ae3a6edcd16ebc7c);
enum class ModularAssistiveDrivingSystemState_ae3a6edcd16ebc7c: uint16_t {
  DISABLED,
  PAUSED,
  ENABLED,
  SOFT_DISABLING,
  OVERRIDING,
};
CAPNP_DECLARE_ENUM(ModularAssistiveDrivingSystemState, ae3a6edcd16ebc7c);
CAPNP_DECLARE_SCHEMA(aedffd8f31e7b55d);
CAPNP_DECLARE_SCHEMA(d8cbae8ae9dfe286);
CAPNP_DECLARE_SCHEMA(bca628696e164cbc);
enum class Type_bca628696e164cbc: uint16_t {
  DRIVE,
  NAVIGATION,
  METADATA,
};
CAPNP_DECLARE_ENUM(Type, bca628696e164cbc);
CAPNP_DECLARE_SCHEMA(e7c36e65fea112b1);
CAPNP_DECLARE_SCHEMA(da834d53e62048b9);
enum class DownloadStatus_da834d53e62048b9: uint16_t {
  NOT_DOWNLOADING,
  DOWNLOADING,
  DOWNLOADED,
  CACHED,
  FAILED,
};
CAPNP_DECLARE_ENUM(DownloadStatus, da834d53e62048b9);
CAPNP_DECLARE_SCHEMA(a677b25114d64c73);
CAPNP_DECLARE_SCHEMA(c99c128a7e247b05);
enum class Runner_c99c128a7e247b05: uint16_t {
  SNPE,
  TINYGRAD,
};
CAPNP_DECLARE_ENUM(Runner, c99c128a7e247b05);
CAPNP_DECLARE_SCHEMA(e60821c0505ad473);
CAPNP_DECLARE_SCHEMA(f35cc4560bbf6ec2);
CAPNP_DECLARE_SCHEMA(da96579883444c35);
CAPNP_DECLARE_SCHEMA(80ae746ee2596b11);
CAPNP_DECLARE_SCHEMA(a5cd762cd951a455);
CAPNP_DECLARE_SCHEMA(f98d843bfd7004a3);
CAPNP_DECLARE_SCHEMA(b86e6369214c01c8);
CAPNP_DECLARE_SCHEMA(f416ec09499d9d19);
CAPNP_DECLARE_SCHEMA(a1680744031fdb2d);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct SelfdriveStateSP {
  SelfdriveStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ModularAssistiveDrivingSystem;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81c2f05a394cf4af, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SelfdriveStateSP::ModularAssistiveDrivingSystem {
  ModularAssistiveDrivingSystem() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ModularAssistiveDrivingSystemState_ae3a6edcd16ebc7c ModularAssistiveDrivingSystemState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fedf95d62450ddd1, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP {
  ModelManagerSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct DownloadUri;
  typedef ::capnp::schemas::Type_bca628696e164cbc Type;

  struct Model;
  typedef ::capnp::schemas::DownloadStatus_da834d53e62048b9 DownloadStatus;

  struct DownloadProgress;
  typedef ::capnp::schemas::Runner_c99c128a7e247b05 Runner;

  struct ModelBundle;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aedffd8f31e7b55d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::DownloadUri {
  DownloadUri() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8cbae8ae9dfe286, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::Model {
  Model() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7c36e65fea112b1, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::DownloadProgress {
  DownloadProgress() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a677b25114d64c73, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelManagerSP::ModelBundle {
  ModelBundle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e60821c0505ad473, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved2 {
  CustomReserved2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f35cc4560bbf6ec2, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved3 {
  CustomReserved3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da96579883444c35, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved4 {
  CustomReserved4() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80ae746ee2596b11, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved5 {
  CustomReserved5() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5cd762cd951a455, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved6 {
  CustomReserved6() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98d843bfd7004a3, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved7 {
  CustomReserved7() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b86e6369214c01c8, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved8 {
  CustomReserved8() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f416ec09499d9d19, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved9 {
  CustomReserved9() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1680744031fdb2d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SelfdriveStateSP::Reader {
public:
  typedef SelfdriveStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMads() const;
  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader getMads() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SelfdriveStateSP::Builder {
public:
  typedef SelfdriveStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMads();
  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder getMads();
  inline void setMads( ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader value);
  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder initMads();
  inline void adoptMads(::capnp::Orphan< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>&& value);
  inline ::capnp::Orphan< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem> disownMads();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SelfdriveStateSP::Pipeline {
public:
  typedef SelfdriveStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Pipeline getMads();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader {
public:
  typedef ModularAssistiveDrivingSystem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState getState() const;

  inline bool getEnabled() const;

  inline bool getActive() const;

  inline bool getAvailable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder {
public:
  typedef ModularAssistiveDrivingSystem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState getState();
  inline void setState( ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getActive();
  inline void setActive(bool value);

  inline bool getAvailable();
  inline void setAvailable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SelfdriveStateSP::ModularAssistiveDrivingSystem::Pipeline {
public:
  typedef ModularAssistiveDrivingSystem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Reader {
public:
  typedef ModelManagerSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasActiveBundle() const;
  inline  ::cereal::ModelManagerSP::ModelBundle::Reader getActiveBundle() const;

  inline bool hasSelectedBundle() const;
  inline  ::cereal::ModelManagerSP::ModelBundle::Reader getSelectedBundle() const;

  inline bool hasAvailableBundles() const;
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader getAvailableBundles() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Builder {
public:
  typedef ModelManagerSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActiveBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder getActiveBundle();
  inline void setActiveBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value);
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder initActiveBundle();
  inline void adoptActiveBundle(::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> disownActiveBundle();

  inline bool hasSelectedBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder getSelectedBundle();
  inline void setSelectedBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value);
  inline  ::cereal::ModelManagerSP::ModelBundle::Builder initSelectedBundle();
  inline void adoptSelectedBundle(::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> disownSelectedBundle();

  inline bool hasAvailableBundles();
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder getAvailableBundles();
  inline void setAvailableBundles( ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder initAvailableBundles(unsigned int size);
  inline void adoptAvailableBundles(::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>> disownAvailableBundles();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Pipeline {
public:
  typedef ModelManagerSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline getActiveBundle();
  inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline getSelectedBundle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::DownloadUri::Reader {
public:
  typedef DownloadUri Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline  ::capnp::Text::Reader getUri() const;

  inline bool hasSha256() const;
  inline  ::capnp::Text::Reader getSha256() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::DownloadUri::Builder {
public:
  typedef DownloadUri Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline  ::capnp::Text::Builder getUri();
  inline void setUri( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUri();

  inline bool hasSha256();
  inline  ::capnp::Text::Builder getSha256();
  inline void setSha256( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSha256(unsigned int size);
  inline void adoptSha256(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSha256();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::DownloadUri::Pipeline {
public:
  typedef DownloadUri Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::Model::Reader {
public:
  typedef Model Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFullName() const;
  inline  ::capnp::Text::Reader getFullName() const;

  inline bool hasFileName() const;
  inline  ::capnp::Text::Reader getFileName() const;

  inline bool hasDownloadUri() const;
  inline  ::cereal::ModelManagerSP::DownloadUri::Reader getDownloadUri() const;

  inline bool hasDownloadProgress() const;
  inline  ::cereal::ModelManagerSP::DownloadProgress::Reader getDownloadProgress() const;

  inline  ::cereal::ModelManagerSP::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::Model::Builder {
public:
  typedef Model Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFullName();
  inline  ::capnp::Text::Builder getFullName();
  inline void setFullName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFullName(unsigned int size);
  inline void adoptFullName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFullName();

  inline bool hasFileName();
  inline  ::capnp::Text::Builder getFileName();
  inline void setFileName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFileName(unsigned int size);
  inline void adoptFileName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFileName();

  inline bool hasDownloadUri();
  inline  ::cereal::ModelManagerSP::DownloadUri::Builder getDownloadUri();
  inline void setDownloadUri( ::cereal::ModelManagerSP::DownloadUri::Reader value);
  inline  ::cereal::ModelManagerSP::DownloadUri::Builder initDownloadUri();
  inline void adoptDownloadUri(::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri> disownDownloadUri();

  inline bool hasDownloadProgress();
  inline  ::cereal::ModelManagerSP::DownloadProgress::Builder getDownloadProgress();
  inline void setDownloadProgress( ::cereal::ModelManagerSP::DownloadProgress::Reader value);
  inline  ::cereal::ModelManagerSP::DownloadProgress::Builder initDownloadProgress();
  inline void adoptDownloadProgress(::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress>&& value);
  inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress> disownDownloadProgress();

  inline  ::cereal::ModelManagerSP::Type getType();
  inline void setType( ::cereal::ModelManagerSP::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::Model::Pipeline {
public:
  typedef Model Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelManagerSP::DownloadUri::Pipeline getDownloadUri();
  inline  ::cereal::ModelManagerSP::DownloadProgress::Pipeline getDownloadProgress();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::DownloadProgress::Reader {
public:
  typedef DownloadProgress Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus() const;

  inline float getProgress() const;

  inline  ::uint32_t getEta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::DownloadProgress::Builder {
public:
  typedef DownloadProgress Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus();
  inline void setStatus( ::cereal::ModelManagerSP::DownloadStatus value);

  inline float getProgress();
  inline void setProgress(float value);

  inline  ::uint32_t getEta();
  inline void setEta( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::DownloadProgress::Pipeline {
public:
  typedef DownloadProgress Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelManagerSP::ModelBundle::Reader {
public:
  typedef ModelBundle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex() const;

  inline bool hasInternalName() const;
  inline  ::capnp::Text::Reader getInternalName() const;

  inline bool hasDisplayName() const;
  inline  ::capnp::Text::Reader getDisplayName() const;

  inline bool hasModels() const;
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader getModels() const;

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus() const;

  inline  ::uint32_t getGeneration() const;

  inline bool hasEnvironment() const;
  inline  ::capnp::Text::Reader getEnvironment() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelManagerSP::ModelBundle::Builder {
public:
  typedef ModelBundle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex();
  inline void setIndex( ::uint32_t value);

  inline bool hasInternalName();
  inline  ::capnp::Text::Builder getInternalName();
  inline void setInternalName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInternalName(unsigned int size);
  inline void adoptInternalName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInternalName();

  inline bool hasDisplayName();
  inline  ::capnp::Text::Builder getDisplayName();
  inline void setDisplayName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisplayName(unsigned int size);
  inline void adoptDisplayName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisplayName();

  inline bool hasModels();
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder getModels();
  inline void setModels( ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder initModels(unsigned int size);
  inline void adoptModels(::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>> disownModels();

  inline  ::cereal::ModelManagerSP::DownloadStatus getStatus();
  inline void setStatus( ::cereal::ModelManagerSP::DownloadStatus value);

  inline  ::uint32_t getGeneration();
  inline void setGeneration( ::uint32_t value);

  inline bool hasEnvironment();
  inline  ::capnp::Text::Builder getEnvironment();
  inline void setEnvironment( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEnvironment(unsigned int size);
  inline void adoptEnvironment(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEnvironment();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelManagerSP::ModelBundle::Pipeline {
public:
  typedef ModelBundle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved2::Reader {
public:
  typedef CustomReserved2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved2::Builder {
public:
  typedef CustomReserved2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved2::Pipeline {
public:
  typedef CustomReserved2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved3::Reader {
public:
  typedef CustomReserved3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved3::Builder {
public:
  typedef CustomReserved3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved3::Pipeline {
public:
  typedef CustomReserved3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved4::Reader {
public:
  typedef CustomReserved4 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved4::Builder {
public:
  typedef CustomReserved4 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved4::Pipeline {
public:
  typedef CustomReserved4 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved5::Reader {
public:
  typedef CustomReserved5 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved5::Builder {
public:
  typedef CustomReserved5 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved5::Pipeline {
public:
  typedef CustomReserved5 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved6::Reader {
public:
  typedef CustomReserved6 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved6::Builder {
public:
  typedef CustomReserved6 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved6::Pipeline {
public:
  typedef CustomReserved6 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved7::Reader {
public:
  typedef CustomReserved7 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved7::Builder {
public:
  typedef CustomReserved7 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved7::Pipeline {
public:
  typedef CustomReserved7 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved8::Reader {
public:
  typedef CustomReserved8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved8::Builder {
public:
  typedef CustomReserved8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved8::Pipeline {
public:
  typedef CustomReserved8 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved9::Reader {
public:
  typedef CustomReserved9 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved9::Builder {
public:
  typedef CustomReserved9 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved9::Pipeline {
public:
  typedef CustomReserved9 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SelfdriveStateSP::Reader::hasMads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SelfdriveStateSP::Builder::hasMads() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader SelfdriveStateSP::Reader::getMads() const {
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder SelfdriveStateSP::Builder::getMads() {
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Pipeline SelfdriveStateSP::Pipeline::getMads() {
  return  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SelfdriveStateSP::Builder::setMads( ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder SelfdriveStateSP::Builder::initMads() {
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SelfdriveStateSP::Builder::adoptMads(
    ::capnp::Orphan< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem> SelfdriveStateSP::Builder::disownMads() {
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader::getState() const {
  return _reader.getDataField< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::getState() {
  return _builder.getDataField< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::setState( ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState value) {
  _builder.setDataField< ::cereal::SelfdriveStateSP::ModularAssistiveDrivingSystem::ModularAssistiveDrivingSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Reader::getAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::getAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void SelfdriveStateSP::ModularAssistiveDrivingSystem::Builder::setAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::Reader::hasActiveBundle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasActiveBundle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::ModelBundle::Reader ModelManagerSP::Reader::getActiveBundle() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::getActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline ModelManagerSP::Pipeline::getActiveBundle() {
  return  ::cereal::ModelManagerSP::ModelBundle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Builder::setActiveBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::initActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::adoptActiveBundle(
    ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> ModelManagerSP::Builder::disownActiveBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Reader::hasSelectedBundle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasSelectedBundle() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::ModelBundle::Reader ModelManagerSP::Reader::getSelectedBundle() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::getSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::ModelBundle::Pipeline ModelManagerSP::Pipeline::getSelectedBundle() {
  return  ::cereal::ModelManagerSP::ModelBundle::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Builder::setSelectedBundle( ::cereal::ModelManagerSP::ModelBundle::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::ModelBundle::Builder ModelManagerSP::Builder::initSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::adoptSelectedBundle(
    ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::ModelBundle> ModelManagerSP::Builder::disownSelectedBundle() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::ModelBundle>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Reader::hasAvailableBundles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Builder::hasAvailableBundles() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader ModelManagerSP::Reader::getAvailableBundles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::Builder::getAvailableBundles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Builder::setAvailableBundles( ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::Builder::initAvailableBundles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Builder::adoptAvailableBundles(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>> ModelManagerSP::Builder::disownAvailableBundles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::ModelBundle,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::DownloadUri::Reader::hasUri() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::DownloadUri::Builder::hasUri() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::DownloadUri::Reader::getUri() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::getUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::DownloadUri::Builder::setUri( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::DownloadUri::Builder::adoptUri(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::DownloadUri::Builder::disownUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::DownloadUri::Reader::hasSha256() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::DownloadUri::Builder::hasSha256() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::DownloadUri::Reader::getSha256() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::getSha256() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::DownloadUri::Builder::setSha256( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::DownloadUri::Builder::initSha256(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::DownloadUri::Builder::adoptSha256(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::DownloadUri::Builder::disownSha256() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Model::Reader::hasFullName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasFullName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::Model::Reader::getFullName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::Model::Builder::getFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::setFullName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::Model::Builder::initFullName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Model::Builder::adoptFullName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::Model::Builder::disownFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Model::Reader::hasFileName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasFileName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::Model::Reader::getFileName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::Model::Builder::getFileName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::setFileName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::Model::Builder::initFileName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::Model::Builder::adoptFileName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::Model::Builder::disownFileName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Model::Reader::hasDownloadUri() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasDownloadUri() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::DownloadUri::Reader ModelManagerSP::Model::Reader::getDownloadUri() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::DownloadUri::Builder ModelManagerSP::Model::Builder::getDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::DownloadUri::Pipeline ModelManagerSP::Model::Pipeline::getDownloadUri() {
  return  ::cereal::ModelManagerSP::DownloadUri::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Model::Builder::setDownloadUri( ::cereal::ModelManagerSP::DownloadUri::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::DownloadUri::Builder ModelManagerSP::Model::Builder::initDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::adoptDownloadUri(
    ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadUri> ModelManagerSP::Model::Builder::disownDownloadUri() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadUri>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::Model::Reader::hasDownloadProgress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::Model::Builder::hasDownloadProgress() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Reader ModelManagerSP::Model::Reader::getDownloadProgress() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Builder ModelManagerSP::Model::Builder::getDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelManagerSP::DownloadProgress::Pipeline ModelManagerSP::Model::Pipeline::getDownloadProgress() {
  return  ::cereal::ModelManagerSP::DownloadProgress::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelManagerSP::Model::Builder::setDownloadProgress( ::cereal::ModelManagerSP::DownloadProgress::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelManagerSP::DownloadProgress::Builder ModelManagerSP::Model::Builder::initDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::Model::Builder::adoptDownloadProgress(
    ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelManagerSP::DownloadProgress> ModelManagerSP::Model::Builder::disownDownloadProgress() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelManagerSP::DownloadProgress>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::Type ModelManagerSP::Model::Reader::getType() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::Type ModelManagerSP::Model::Builder::getType() {
  return _builder.getDataField< ::cereal::ModelManagerSP::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::Model::Builder::setType( ::cereal::ModelManagerSP::Type value) {
  _builder.setDataField< ::cereal::ModelManagerSP::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::DownloadProgress::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::DownloadProgress::Builder::getStatus() {
  return _builder.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setStatus( ::cereal::ModelManagerSP::DownloadStatus value) {
  _builder.setDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelManagerSP::DownloadProgress::Reader::getProgress() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelManagerSP::DownloadProgress::Builder::getProgress() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setProgress(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelManagerSP::DownloadProgress::Reader::getEta() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::DownloadProgress::Builder::getEta() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::DownloadProgress::Builder::setEta( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Reader::getIndex() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Builder::getIndex() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setIndex( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasInternalName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasInternalName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getInternalName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getInternalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setInternalName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initInternalName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptInternalName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownInternalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::ModelBundle::Reader::hasDisplayName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasDisplayName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getDisplayName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getDisplayName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setDisplayName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initDisplayName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptDisplayName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownDisplayName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelManagerSP::ModelBundle::Reader::hasModels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasModels() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader ModelManagerSP::ModelBundle::Reader::getModels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::getModels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setModels( ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>::Builder ModelManagerSP::ModelBundle::Builder::initModels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptModels(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>> ModelManagerSP::ModelBundle::Builder::disownModels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelManagerSP::Model,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::ModelBundle::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelManagerSP::DownloadStatus ModelManagerSP::ModelBundle::Builder::getStatus() {
  return _builder.getDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setStatus( ::cereal::ModelManagerSP::DownloadStatus value) {
  _builder.setDataField< ::cereal::ModelManagerSP::DownloadStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Reader::getGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelManagerSP::ModelBundle::Builder::getGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelManagerSP::ModelBundle::Builder::setGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModelManagerSP::ModelBundle::Reader::hasEnvironment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelManagerSP::ModelBundle::Builder::hasEnvironment() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelManagerSP::ModelBundle::Reader::getEnvironment() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::getEnvironment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelManagerSP::ModelBundle::Builder::setEnvironment( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelManagerSP::ModelBundle::Builder::initEnvironment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelManagerSP::ModelBundle::Builder::adoptEnvironment(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelManagerSP::ModelBundle::Builder::disownEnvironment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

